// Color System using OKLCH
// Base colors use lightness (l) and chroma (c) to control brightness and saturation
// while maintaining consistent hues (h) across variants
@use "sass:map";
@import "oklch-variables";
// B&W
$black: #000;
$white: #fff;

// Base hues
$color-hues: (
  "red": 27,
  "pink": 15,
  "fuchsia": 360,
  "purple": 310,
  "violet": 280,
  "indigo": 265,
  "blue": 250,
  "azure": 235,
  "cyan": 200,
  "jade": 165,
  "green": 145,
  "lime": 125,
  "yellow": 85,
  "amber": 75,
  "pumpkin": 65,
  "orange": 45,
  "sand": 35,
  "grey": 0,
  "zinc": 240,
  "slate": 255,
);

@function get-color-shade($hue, $shade) {
  @return oklch(map.get($lightness, $shade) map.get($chroma, $shade) $hue);
}

// Helper function to get a color shade by name
@function get-color($color-name, $shade: 600) {
  @return get-color-shade(map.get($color-hues, $color-name), $shade);
}

// Helper function for color with alpha
@function get-color-alpha($color-name, $shade, $alpha) {
  @return color-mix(in oklch, get-color($color-name, $shade) $alpha, transparent);
}

// Red with consistent hue
$red: get-color-shade(map.get($color-hues, "red"), 600);
// Pink with consistent hue
$pink: get-color-shade(map.get($color-hues, "pink"), 600);

// Fuchsia with consistent hue
$fuchsia: get-color-shade(map.get($color-hues, "fuchsia"), 600);

// Purple with consistent hue
$purple: get-color-shade(map.get($color-hues, "purple"), 600);

// Violet with consistent hue
$violet: get-color-shade(map.get($color-hues, "violet"), 600);

// Indigo with consistent hue
$indigo: get-color-shade(map.get($color-hues, "indigo"), 600);

// Blue with consistent hue
$blue: get-color-shade(map.get($color-hues, "blue"), 600);

// Azure with consistent hue
$azure: get-color-shade(map.get($color-hues, "azure"), 600);

// Cyan with consistent hue
$cyan: get-color-shade(map.get($color-hues, "cyan"), 600);

// Jade with consistent hue
$jade: get-color-shade(map.get($color-hues, "jade"), 600);

// Green with consistent hue
$green: get-color-shade(map.get($color-hues, "green"), 600);

// Lime with consistent hue
$lime: get-color-shade(map.get($color-hues, "lime"), 600);

// Yellow with consistent hue
$yellow: get-color-shade(map.get($color-hues, "yellow"), 600);

// Amber with consistent hue
$amber: get-color-shade(map.get($color-hues, "amber"), 600);

// Orange with consistent hue
$orange: get-color-shade(map.get($color-hues, "orange"), 600);

// Sand with consistent hue
$sand: get-color-shade(map.get($color-hues, "sand"), 600);

// Grey with consistent hue
$grey: get-color-shade(map.get($color-hues, "grey"), 600);

// Zinc with consistent hue
$zinc: get-color-shade(map.get($color-hues, "zinc"), 600);

// Slate with consistent hue
$slate: get-color-shade(map.get($color-hues, "slate"), 600);

// Pumpkin with consistent hue
$pumpkin: get-color-shade(map.get($color-hues, "pumpkin"), 600);

// Define color names array
$color-names: (
  "red",
  "pink",
  "fuchsia",
  "purple",
  "violet",
  "indigo",
  "blue",
  "azure",
  "cyan",
  "jade",
  "green",
  "lime",
  "yellow",
  "amber",
  "orange",
  "sand",
  "grey",
  "zinc",
  "slate",
  "pumpkin"
);

// Define shade values
$shade-values: (
  950,
  900,
  850,
  800,
  750,
  700,
  650,
  600,
  550,
  500,
  450,
  400,
  350,
  300,
  250,
  200,
  150,
  100,
  50
);

// Build colors map dynamically
$colors: ();
@each $color in $color-names {
  $color-map: ();
  @each $shade in $shade-values {
    $color-map: map.merge(
      $color-map,
      (
        $shade: get-color-shade(map.get($color-hues, $color), $shade),
      )
    );
  }
  $colors: map.merge(
    $colors,
    (
      $color: $color-map,
    )
  );
}
