@use "sass:color";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
@use "settings";

// Get the brightness of a color
@function brightness($color) {
  @return math.div(foreground-brightness($color), 255) * 100%;
}

// Get the foreground brightness of a color
@function foreground-brightness($color) {
  @if meta.type-of($color) != "color" {
    @return 0;
  }

  @return math.div(
    (
      color.channel($color, "red", srgb) * 299 + color.channel($color, "green", srgb) * 587 +
        color.channel($color, "blue", srgb) * 114
    ),
    1000
  );
}

// Determines if the foreground needs to be light or dark
@function foreground($color) {
  @if meta.type-of($color) != "color" {
    @return $color;
  }

  @return if(brightness($color) > 50%, settings.$black, settings.$white);
}

// Get the inverse color
@function inverse($color) {
  @if meta.type-of($color) != "color" {
    @return $color;
  }

  @return color.adjust(
    $color,
    $red: 255 - color.channel($color, "red", srgb),
    $green: 255 - color.channel($color, "green", srgb),
    $blue: 255 - color.channel($color, "blue", srgb)
  );
}

// Get the display RGB value
@function display-rgb($color) {
  @if meta.type-of($color) != "color" {
    @return $color;
  }

  $red: color.channel($color, "red", srgb);
  $green: color.channel($color, "green", srgb);
  $blue: color.channel($color, "blue", srgb);

  @return "#{$red},#{$green},#{$blue}";
}

// Returns the color as RGB, HSL or HEX
@function display-color($color, $format: "rgb") {
  @if meta.type-of($color) != "color" {
    @return $color;
  }

  @return if(
    $format == "rgb",
    "rgb(#{color.channel($color, "red", srgb)}, #{color.channel($color, "green", srgb)}, #{color.channel($color, "blue", srgb)})",
    if(
      $format == "hsl",
      "hsl(#{math.round(color.hue($color))}, #{math.round(color.saturation($color))}%, #{math.round(color.lightness($color))}%)",
      "#{$color}"
    )
  );
}
