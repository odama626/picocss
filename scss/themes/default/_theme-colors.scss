@use "sass:map";
@use "sass:list";
@use "../../colors" as *;
@use "../../settings" as *;

// Define colors that use white or black inverse
$colors-with-white-inverse: (
  "azure",
  "blue",
  "cyan",
  "fuchsia",
  "green",
  "indigo",
  "jade",
  "pink",
  "purple",
  "red",
  "slate",
  "violet",
  "zinc",
  "grey"
);
$colors-with-black-inverse: ("amber", "lime", "orange", "yellow", "pumpkin", "sand");

@function get-dark-variables($color, $inverse-color: $black) {
  $switch-thumb-box-shadow: if(
    $inverse-color == $black,
    0 0 0.5rem rgba($black, 0.25),
    0 0 0 rgba(0, 0, 0, 0)
  );
  @return (
    "text-selection-color": get-color-alpha($color, 400, 0.25),
    "text-selection-background": get-color-alpha($color, 100, 0.9),
    "primary": get-color($color, 350),
    "primary-background": get-color($color, 100),
    "primary-underline": get-color($color, 400),
    "primary-hover": get-color($color, 250),
    "primary-hover-background": get-color($color, 150),
    "primary-focus": get-color-alpha($color, 350, 0.375),
    "primary-inverse": $inverse-color,
    "switch-thumb-box-shadow": $switch-thumb-box-shadow
  );
}

@function get-light-variables($color, $inverse-color: $black) {
  $switch-thumb-box-shadow: if(
    $inverse-color == $black,
    0 0 0.5rem rgba($black, 0.25),
    0 0 0 rgba(0, 0, 0, 0)
  );
  @debug $color;
  @return (
    "text-selection-color": get-color-alpha($color, 400, 0.25),
    "text-selection-background": get-color-alpha($color, 200, 0.9),
    "primary": get-color($color, 550),
    "primary-background": get-color($color, 200),
    "primary-underline": get-color($color, 400),
    "primary-hover": get-color($color, 650),
    "primary-hover-background": get-color($color, 250),
    "primary-focus": get-color-alpha($color, 400, 0.5),
    "primary-inverse": $inverse-color,
    "switch-thumb-box-shadow": $switch-thumb-box-shadow
  );
}

// Function to generate color mappings for a list of colors with specified inverse color
@function generate-color-mappings($color-list, $inverse-color) {
  $mappings: ();
  @each $name in $color-list {
    $light-variables: get-light-variables($name, $inverse-color);
    $dark-variables: get-dark-variables($name, $inverse-color);

    $mappings: map.set($mappings, $name, "dark", $dark-variables);
    $mappings: map.set($mappings, $name, "light", $light-variables);
  }
  @return $mappings;
}

// Build color mappings dynamically
$color-mappings: map.merge(
  generate-color-mappings($colors-with-white-inverse, $white),
  generate-color-mappings($colors-with-black-inverse, $black)
);

@function get($key, $mode: "light") {
  $color-mapping: map.get($color-mappings, $theme-color);
  @if not $color-mapping {
    @error "Theme color '#{$theme-color}' not found in color mappings";
  }

  $mode-mapping: map.get($color-mapping, $mode);
  @if not $mode-mapping {
    @error "Mode '#{$mode}' not found for theme color '#{$theme-color}'";
  }

  $result: map.get($mode-mapping, $key);
  @if not $result {
    @error "Key '#{$key}' not found in #{$mode} mode for theme color '#{$theme-color}'";
  }

  @return $result;
}
